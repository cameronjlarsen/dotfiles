local status_ok, catppuccin = pcall(require, "catppuccin")
if not status_ok then
    return
end

catppuccin.setup({
    flavour = "mocha",
    transparent_background = true,
    dim_inactive = {
        enabled = false,
        shade = "dark",
        percentage = 0.15,
    },
    show_end_of_buffer = false,
    term_colors = true,
    styles = {
        comments = { "italic" },
        properties = { "italic" },
        functions = { "italic", "bold" },
        keywords = { "italic" },
        operators = { "bold" },
        conditionals = { "bold" },
        loops = { "bold" },
        booleans = { "bold", "italic" },
        numbers = {},
        types = {},
        strings = {},
        variables = {},
    },
    integrations = {
        aerial = false,
        barbar = false,
        beacon = false,
        cmp = true,
        coc_nvim = false,
        dashboard = true,
        fern = false,
        fidget = true,
        gitgutter = false,
        gitsigns = true,
        harpoon = true,
        hop = false,
        illuminate = false,
        leap = false,
        lightspeed = false,
        lsp_saga = false,
        lsp_trouble = false,
        markdown = true,
        mason = true,
        mini = false,
        neogit = false,
        neotest = false,
        neotree = false,
        noice = true,
        notify = true,
        nvimtree = true,
        overseer = false,
        pounce = false,
        semantic_tokens = false,
        symbols_outline = false,
        telekasten = false,
        telescope = true,
        treesitter = true,
        treesitter_context = true,
        ts_rainbow = false,
        ts_rainbow2 = true,
        vim_sneak = false,
        vimwiki = false,
        which_key = true,

        -- Special integrations, see https://github.com/catppuccin/nvim#special-integrations
        dap = {
            enabled = true,
            enable_ui = true,
        },
        indent_blankline = {
            enabled = true,
            colored_indent_levels = true,
        },
        native_lsp = {
            enabled = true,
            virtual_text = {
                errors = { "italic" },
                hints = { "italic" },
                warnings = { "italic" },
                information = { "italic" },
            },
            underlines = {
                errors = { "underline" },
                hints = { "underline" },
                warnings = { "underline" },
                information = { "underline" },
            },
        },
        navic = {
            enabled = false,
            custom_bg = "NONE",
        },
    },
    custom_highlights = function(cp)
        local cnf = catppuccin.options
        return {
            Search = { bg = cp.surface1, fg = cp.pink, style = { "bold" } },
            IncSearch = { bg = cp.pink, fg = cp.surface1 },
            Keyword = { fg = cp.pink },
            Type = { fg = cp.blue },
            Typedef = { fg = cp.yellow },
            StorageClass = { fg = cp.red, style = { "italic" } },
            -- Status Line --
            SLCopilot = { fg = cp.green, bg = cnf.transparent_background and cp.none or cp.mantle },
            SLGitIcon = { fg = cp.text, bg = cnf.transparent_background and cp.none or cp.mantle },
            SLLSPIcon = { fg = cp.blue, bg = cnf.transparent_background and cp.none or cp.mantle },
            -- LSP --
            LSPInlayHint = { fg = cp.surface2, bg = cnf.transparent_background and cp.none or cp.mantle,
                style = { "italic" } },
            -- LSP Info --
            FloatBorder = { fg = cp.blue, bg = cnf.transparent_background and cp.none or cp.mantle },
            -- Telescope
            TelescopeBorder = { bg = cp.crust, fg = cp.crust },
            TelescopeNormal = { bg = cp.crust },
            -- Telescope Preview
            TelescopePreviewBorder = { bg = cp.mantle, fg = cp.mantle },
            TelescopePreviewNormal = { bg = cp.mantle },
            TelescopePreviewTitle = { bg = cp.mantle, fg = cp.lavender },
            -- Telescope Prompt
            TelescopePromptBorder = { bg = cp.surface0, fg = cp.surface0 },
            TelescopePromptNormal = { bg = cp.surface0 },
            TelescopePromptTitle = { bg = cp.surface0, fg = cp.green },
            -- Telescope Selection
            TelescopeSelection = { bg = cp.crust, fg = cp.green },
            TelescopeMultiSelection = { bg = cp.crust, fg = cp.blue },
            -- Treesitter --
            ["@field"] = { fg = cp.rosewater },
            ["@property"] = { fg = cp.yellow },
            ["@include"] = { fg = cp.teal },
            ["@keyword.operator"] = { fg = cp.sky },
            ["@punctuation.special"] = { fg = cp.maroon },
            ["@constructor"] = { fg = cp.lavender },
            ["@exception"] = { fg = cp.peach },
            ["@constant.builtin"] = { fg = cp.lavender },
            ["@type.qualifier"] = { link = "@keyword" },
            ["@variable.builtin"] = { fg = cp.red, style = { "italic" } },
            ["@function.macro"] = { fg = cp.red, style = {} },
            ["@parameter"] = { fg = cp.rosewater },
            ["@keyword"] = { fg = cp.red, style = { "italic" } },
            ["@keyword.function"] = { fg = cp.maroon },
            ["@keyword.return"] = { fg = cp.pink, style = {} },
            ["@method"] = { fg = cp.blue, style = { "italic" } },
            ["@namespace"] = { fg = cp.rosewater, style = {} },
            ["@punctuation.delimiter"] = { fg = cp.teal },
            ["@punctuation.bracket"] = { fg = cp.overlay2 },
            ["@type"] = { fg = cp.yellow },
            ["@variable"] = { fg = cp.text },
            ["@tag.attribute"] = { fg = cp.mauve, style = { "italic" } },
            ["@tag"] = { fg = cp.peach },
            ["@tag.delimiter"] = { fg = cp.maroon },
            ["@text"] = { fg = cp.text },
            ["@function.builtin.bash"] = { fg = cp.red, style = { "italic" } },
            ["@parameter.bash"] = { fg = cp.yellow, style = { "italic" } },
            ["@field.lua"] = { fg = cp.lavender },
            ["@constructor.lua"] = { fg = cp.flamingo },
            ["@constant.java"] = { fg = cp.teal },
            ["@property.typescript"] = { fg = cp.lavender, style = { "italic" } },
            ["@type.css"] = { fg = cp.lavender },
            ["@property.css"] = { fg = cp.yellow, style = { "italic" } },
            ["@type.builtin.c"] = { fg = cp.yellow, style = {} },
            ["@property.cpp"] = { fg = cp.text },
            ["@type.builtin.cpp"] = { fg = cp.yellow, style = {} },
            -- VimTeX --
            texArg = { link = "@include" },
            texFileArg = { link = "texArg" },
            texCmd = { fg = cp.mauve, style = { "italic" } },
            texCmdItem = { link = "@method" },
            texCmdEnv = { fg = cp.lavender, style = { "italic" } },
            texCmdDef = { link = "Typedef" },
            texDefArgName = { link = "Type" },
            texOpt = { link = "@parameter" },
            texFileOpt = { fg = cp.maroon, style = { "italic" } },
            texOptEqual = { link = "@keyword.operator" },
            texDelim = { fg = cp.blue },
            texLength = { fg = cp.text },
            texEnvArgName = { link = "texArg" },
            texMathZoneV = { link = "texMathZoneLI" },
            texMathZoneW = { link = "texMathZoneLD" },
            texMathZoneX = { link = "texMathZoneTI" },
            texMathZoneY = { link = "texMathZoneTD" },
            texMathZoneG = { link = "texMathZoneEnv" },
            texMathZoneGS = { link = "texMathZoneEnvStarred" },
            texMathZoneZ = { link = "texMathZoneEnsured" },
            texStatement = { link = "texCmd" },
        }
    end,
})
